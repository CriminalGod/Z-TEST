DATA JPA """""""""

Spring data provides the abstract repositories, that are implemented at run-time by the spring container and perform the CRUD operations.

THREE INTERFACES
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1. Repository 

interface Repository<T, ID>

It is the central interface in the spring data repository abstraction.
This is a marker interface.
If you are extending this interface, you have to declare your own methods and the implementations will be provided by the spring run-time.
For this interface, we have to pass two parameters: type of the entity and type of the entity's primary field.
This is the super interface for CrudRepository.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2. CrudRepository 

interface CrudRepository<T, ID> extends Repository<T, ID>

CrudRepository mainly provides CRUD (Create, Read, Update, Delete) operations.
Return type of saveAll() method is Iterable.
Use Case - To perform CRUD operations, define repository extending CrudRepository.

When you define CrudRepository, you have to pass two parameters: type of the entity and type of the entity's id field.
If you are extending the CrudRepository , there is no need for implementing your own methods.
Just extend this interface and leave it as blank.
Required implementations are provided at run time.
This interface has the following methods:

long count()
void delete(T entity)
void deleteById(ID id)
void deleteAll()
void deleteALL(Iterable<? extend T> entities)
void deleteAllById(Iterable<? extend ID> ids)
boolean	existsById(ID id)
Iterable findAll()
Iterable<T> findAllById(Iterable<ID> ids)
Optional<T> findById(ID id)
S save(S entity)
Iterable<S>	saveAll(Iterable<S> entities)

EXAMPLE

public interface BookRepo extends JpaRepository<Book, Long>
{
	// empty,,,,,,, required implementation will be provided at run-time
}

We have used JpaRepository, which is a special version specific to the JPA technology.
Unless until you are using any JPA specific things in your applications, it is highly recommended to use the CrudRepository,
because it will not tie your application with any specific store implementations.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3. PagingAndSortingRepository 

public PaginfAndSortingRepository<T, ID> extends CrudRepository<T, ID>

This is extension of CrudRepository.
It is specialized version for the paging operations.


Iterable<T> findAll(Sort sort)		returns all entities sorted by the given options.
Page<T> findAll(Pageable pageable)	returns a Page of entites meeting the paging restriction provided in the pageable object.


^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Page

interface Page<T> extends Slice<T>

All Superinterfaces:
Iterable<T>, Slice<T>, Streamable<T>, Supplier<Stream<T>>

A page is sublist of a list of object.
It allows gain information about the  position of it in the containing entire list.

static <T> Page<T> empty()        creates a new empty Page.
static <T> Page<T> empty(Pageable pageable)   creates a new empty Page foe the given Pageable.
long getTotalElements()   returns the total amount of elements.
int getTotalPages    returns the total number of pages.
<U> Page<U> map(Function<? super T, ? extends U> converter)	 
			returns a new Page with the content of the current one mapped by the given Function




^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
JpaRepository 

interface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T>

JpaRepository extends PagingAndSortingRepository that extends CrudRepository.
JpaRepository provides CRUD and pagination operations, along with additional methods like flush(), saveAndFlush(), 
and deleteInBatch(), etc.
Return type of saveAll() method is a List.
Use Case - To perform CRUD as well as batch operations, define repository extends JpaRepository.

Difference between JpaRepository and CrudRepository in Spring Data JPA

Both JpaRepository and CrudRepository are base interfaces in Spring Data.
Application developer has to choose any of the base interfaces for your own repository.
It has two purposes,

One is to allow spring data to CREATE PROXY INSTANCE for your repository interface.

Second one is to INHERIT THE MAXIMUM DEFAULT FUNCTIONALITY from the base interface without declaring your own methods.


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Iterable

interface Iterable<T>

implementing this interface allows an object to be the target of the for-each loop statement

Abstract Method
Iterator<T> iterator()     returns an iterator over elements of type T

Default Methods
default void forEach(Consumer<? super T> action)  
default Spliterator<T> spliterator()

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
MARKER INTERFACES
A marker interface is an interface that HAS NO METHODS OR CONSTANTS inside it.
It provides run-time type information about objects, so the compiler and JVM have additional information about the object.
A marker interface is also called a TAGGING INTERFACE.

Though marker interfaces are still in use, they very likely point to a code smell and should be used carefully. 
The main reason for this is that they blur the lines about what an interface represents since markers don't define any behavior. 
Newer development favors annotations to solve some of the same problems.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Spring Data JPA provides three different approaches for creating custom queries with query methods

CREATING DATABASE QUERIES FROM METHODNAMES: describes how we can create database queries from the method names of our query methods.

CREATING DATABASE QUERIES WITH NAMEDQUERIES: describes how we can create database queries by using named queries.

CREATING DATABASE QUERIES WITH THE '@Query' ANNOTATION: describes how we can create database queries by annotating our query methods
with the @Query annotation.


1. QUERY METHODS
Spring Data JPA has a built in query creation mechanism which can be used for parsing queries straight from the method name of a QUERY METHOD.

All you have to ensure that the method names of your repository interface are created by combining the property names of entity object and
the supported keywords.

Standard CRUD functionality respositories usually have queries on the underlying datastore.

// Declare an interface extending Repository or one of its subinterfaces and type it to the domain class and ID type that it should handle

interface personRepo extends Repository<Person, Integer>{
	
	// Declare query method on the interface
	List<Person> findByLastName(String lastName);
}

Setup Spring to create proxy instances for those interfaces, either with JavaConfig or with XML configuration

import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@EnableJpaRepositories
class Config{}






























